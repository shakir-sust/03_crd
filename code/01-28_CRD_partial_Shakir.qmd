---
title: "CRD"
format: html
---

# Introduction  
The goals of this exercise are to:  
- Create an analytical workflow for a CRD design, from data import through publication-ready plot  
- Understand each of its components  
- Talk about some important aspects including   
    - contrast type, 
    - sum-of-squares type
    - deciding how to extract and display model means and pairwise comparisons  

# a) Setup  
Here is where we load the packages we will use.  
```{r setup, warning=FALSE, message=FALSE}

#Installing packages

#install.packages("broom")

#install.packages("tidyverse")
#install.packages("car")
#install.packages("broom")
#install.packages("emmeans")
#install.packages("multcomp")
#install.packages("multcompView")

# Loading packages

library(tidyverse) # for data wrangling and plotting
library(car) # for Anova function
library(broom) # for model residuals extraction and residuals diagnostics
library(emmeans) # for model mean extraction
library(multcomp) # for pairwise comparison letter display
library(multcompView) # for pairwise comparison letter display
```

```{r data import, warning=FALSE, message=FALSE}
crd_df <- read_csv("../data/wheat_nk_balkh.csv")

crd_df
```

# b) EDA tables  
```{r summary}
summary(crd_df)
```

```{r glimpse}
glimpse(crd_df)
```

# c) Wrangling  
```{r crd_dfw}
crd_dfw <- crd_df %>% #The "w" in "crd_dfw" is to indicate wrangled dataframe/ object
  mutate(rep = factor(rep), #"factor()" function converts "rep" from a "numeric" variable to "categorical" variable
         nrate_kgha = factor(nrate_kgha), #"factor()" function converts "numeric" variable to "categorical" variable
         krate_kgha = factor(krate_kgha) #"factor()" function converts "numeric" variable to "categorical" variable
         ) %>%
  mutate(trtname = paste0(nrate_kgha,"+",krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor


crd_dfw
```


```{r crd_dfw}
summary(crd_dfw)
```
Number of replicates: 4  
Number of treatments: 3 N rates x 3 K rates = 9  
Number of observations: 4 (# of replicates) x 9 (# of treatments) = 36  
Yield: from 2795 to 7445 kg/ha  

# d) EDA (Exploratory Data Analysis) plots  
```{r n boxplot}
ggplot(crd_dfw, aes(x = nrate_kgha,
                    y = yield_kgha,
                    fill = nrate_kgha #To color the boxplots by "nrate_kgha"
                    )) +
  geom_boxplot() + #"geom_boxplot()" function creates boxplots
  #geom_point() + # "geom_point()" function shows all data points in a straight line in the boxplots
  geom_jitter() + # "geom_jitter" function jitters out all the data points in a horizontal spread rather than a     straight line. This is helpful because a lot of times (e.g., machine learning) all data points in a straight line does not help.
  stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  theme(legend.position = "none") + # "theme(legend.position = "none")" function removes the legend from the graph. In this example, we do not need legends because the levels of "nrate_kgha" is already indicated in the x-axis
  labs(x = "Nitrogen Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") #To label the x and y axes
```

```{r potassium rate boxplot}
ggplot(crd_dfw, aes(x = krate_kgha,
                    y = yield_kgha,
                    color = krate_kgha #To color the boxplots by "nrate_kgha"
                    )) +
  geom_boxplot() + #"geom_boxplot()" function creates boxplots
  #geom_point() + # "geom_point()" function shows all data points in a straight line in the boxplots
  stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  geom_jitter() + # "geom_jitter" function jitters out all the data points in a horizontal spread rather than a     straight line. This is helpful because a lot of times (e.g., machine learning) all data points in a straight line does not help.
  theme(legend.position = "none") + # "theme(legend.position = "none")" function removes the legend from the graph. In this example, we do not need legends because the levels of "nrate_kgha" is already indicated in the x-axis
  labs(x = "Potassium Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") #To label the x and y axes
```
```{r nitrogen*potassium rate boxplot}
ggplot(crd_dfw, aes(x = nrate_kgha,
                    y = yield_kgha,
                    fill = nrate_kgha #To color the boxplots by "nrate_kgha"
                    )) +
  geom_boxplot() + #"geom_boxplot()" function creates boxplots
  #geom_point() + # "geom_point()" function shows all data points in a straight line in the boxplots
  stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  geom_jitter() + # "geom_jitter" function jitters out all the data points in a horizontal spread rather than a     straight line. This is helpful because a lot of times (e.g., machine learning) all data points in a straight line does not help.
  theme(legend.position = "none") + # "theme(legend.position = "none")" function removes the legend from the graph. In this example, we do not need legends because the levels of "nrate_kgha" is already indicated in the x-axis
  facet_grid(.~krate_kgha,
             labeller = labeller(krate_kgha = function(x) {
               paste("Potassium Rate (Kg/Ha):", x)
             })) + #"facet_grid()" function takes all levels of a specified variable ("potassium rate"/ "krate_kgha" in this case ), then creates separate boxplots for each of the variable levels # the custom function provided to "labeller()" takes the values of the levels for krate_kgha (i.e., 0, 30, 60 kg/ha potassium rate)  and pastes the desired title on top of each facet. As a result, each facet strip will display: "Potassium Rate (Kg/Ha): 0", "Potassium Rate (Kg/Ha): 30", and "Potassium Rate (Kg/Ha): 60"
  labs(x = "Nitrogen Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") #To label the x and y axes
```

# e) Statistical model  
## Set-to-zero vs. sum-to-zero  

## Shortcut for model specification:

Model specification (long way): y ~ x1 + x2 + x1:x2
Model specification (short way): y ~ x1*x2
Both of these same expressions are identical and will do the same operation: y ~ x1 + x2 + x1:x2 == y ~ x1*x2

For this example,
Model specification (long way): yield_kgha ~ nrate_kgha + krate_kgha + nrate_kgha:krate_kgha
Model specification (short way): yield_kgha ~ nrate_kgha*krate_kgha
Both of these same expressions are identidal and will do the same operation:
yield_kgha ~ nrate_kgha + krate_kgha + nrate_kgha:krate_kgha == yield_kgha ~ nrate_kgha*krate_kgha

"Instead of specifying 
          `nrate_kgha + krate_kgha + nrate_kgha:krate_kgha`,  
we could have just used  
                   `nrate_kgha*krate_kgha`.  

R interprets the `*` as "give me all main effects and interactions".

The more interaction effects a model has, the more efficient using the * becomes." - Dr. Bastos  

## Changing default contrast type from "set-to-zero" to "sum-to-zero"

In R, the default contrast type is *set-to-zero*.  

In research, we normally are interested in *sum-to-zero* contrasts.  

Below we change the default to sum-to-zero ("contr.sum") before fitting the model.


```{r model}
# Changing to sum-to-zero contrast
options(contrasts = c("contr.sum", "contr.poly")) #contrasts = c("contr.sum", "contr.poly") means that if the variable is categorical, change the contrast to sum to zero; if the variable is continuous, then change the contrast to polynomial 

# Model fitting
crd_mod <- lm(yield_kgha ~ nrate_kgha*krate_kgha, #the block effect i.e., rep is what separates RCBD from CRD. In RCBD, the "rep" is included in the model as a factor. However, "rep" is not included in the model for CRD.
              data = crd_dfw
                )
# Summary
summary(crd_mod)
```

## Model specification tips  
Instead of specifying 
          `nrate_kgha + krate_kgha + nrate_kgha:krate_kgha`,  
we could have just used  
                   `nrate_kgha*krate_kgha`.  

R interprets the `*` as "give me all main effects and interactions".

The more interacting effects a model has, the more efficient using the * becomes.  


# f) ANOVA table  
The `Anova()` function (case sensitive) allows us to use **type 3 sum of squares**.  

The common functions `aov()` and `anova()` use type 1 SS, which is the wrong choice IF have unbalanced data.

If data is balanced, type 1 and 3 give same results.  

For sake of peace of mind, it is simpler to just always use type 3.  

```{r ANOVA}
Anova(crd_mod, type = 3) #"type = 3" specifies Type III Sum of Squares
```
In the ANOVA output, *(Intercept)* indicates the *overall mean*. We do NOT indicate this in the ANOVA table.

Whenever your model has interaction terms, need to look at them first.  

IF interaction term is significant, then you should explore that **interaction effect**, and not the main effects separately in case they are also significant.    

In our case, we have a **significant effect of the interaction between nrate_kgha and krate_kgha**, and the **main effects are NOT significant**.

Therefore, we should extract means and perform pairwise comparisons for the interaction term.

Before we do that, let's check our model assumptions. Remember, a model is only valid for inference (i.e., means and pwc) IF it fulfills the linear model assumptions.  


# g) Linear model assumptions  
## Extracting residuals
First, let's extract our model residuals, and also create studentized residuals.  

```{r crd_resid}
crd_resid <- broom::augment(crd_mod) %>% #"augment() function is included in the "broom" package
  mutate(.studresid = rstudent(crd_mod)) #creating studentized residuals in a separate column

crd_resid
```

Notice how we have a data frame with the original data rows and columns, plus some extra residual information.  

Now, let's recap the linear model assumptions:  

- Residual independence (no pattern)  
- Residual variance homogeneity (homoscedasticity) (meaning that the variance around the residuals are basically similar, it looks like a shotgun, like a cloud of points and no specific pattern of increasing/ decreasing variance )
- Residual normality (discuss this!)  
- Outlier detection (< -3 SD or > 3 SD)  

## Residual independence  
- For this, we use the **fitted vs. residual plot**.  
- What we want to see: no clear pattern in residuals, random cloud of points.  
- What we do not want to see: clear pattern, for example, quadratic shape.  
- Adding a `geom_smooth()` helps with that conclusion. We want to see the smooth line and error bands comprising 0 on the y axis.  

```{r fitted vs. residual plot to check for residual independence, warning=FALSE, message=FALSE}
ggplot(crd_resid, aes(x = .fitted,
                      y = .studresid)) +
  geom_point(shape = 21, #shape of the points
             fill = "purple", #color of the points
             size = 3, #size of the points
             alpha = .7 #"alpha" specifies the transparency of the points; ranges from 0 to 1 - 0 being completely transparent, 1 is a solid color; here we used .7 for 30 % transparency
              ) +
  geom_hline(yintercept = c(-3, 0, 3), color = "red") + #"geom_hline" adds horizontal reference lines #geom_vline => adds line vertically; geom_hline => adds line horizontally
  geom_smooth() + #spline regression line to visualize residual pattern
  theme_bw()
```
Looks great! Next.  

## Residual homoscedasticity  
- For this, we use the **fitted vs. residual plot**.  
- What we want to see: no clear pattern in residuals, random cloud of points.  
- What we do not want to see: residuals increasing as fitted value increases (fan shape).  
- Adding a `geom_smooth()` helps with that conclusion. We want to see the smooth line and error bands comprising 0 on the y axis.  

```{r fitted vs. residual plot to check for residual homoscedasticity, warning=FALSE, message=FALSE}
ggplot(crd_resid, aes(x=.fitted, y=.studresid)) +
  geom_hline(yintercept = 0, color="red") +
  geom_point(shape = 21,
             fill = "purple", 
             size = 3,
             alpha = .7) +
  geom_smooth() +
  geom_hline(yintercept = c(-3,3), color = "red") +
  theme_bw()

#Alternatively

ggplot(crd_resid, aes(x = .fitted,
                      y = .studresid)) +
  geom_point(shape = 21, #shape of the points
             fill = "purple", #color of the points
             size = 3, #size of the points
             alpha = .7 #"alpha" specifies the transparency of the points; ranges from 0 to 1 - 0 being completely transparent, 1 is a solid color; here we used .7 for 30 % transparency
              ) +
  geom_hline(yintercept = c(-3, 0, 3), color = "red") + #"geom_hline" adds horizontal reference lines #geom_vline => adds line vertically; geom_hline => adds line horizontally
  geom_smooth() + #spline regression line to visualize residual pattern
  theme_bw()

```
Looks great! Next.  

## Residual normality  
- For this, we use the **quantile-quantile (QQ) plot** and **density plot**.    
- What we want to see: residuals centered around 0 and following a normal distribution.  
- What we do not want to see: skewed residuals that do not follow a normal distribution.  

On the QQ plot, we want to see residuals on the black line, meaning they follow their theoretical normal distribution.  
```{r qq plot/ quantile quantile plot: residual normality}
ggplot(crd_resid, aes(sample = .studresid)) +
  stat_qq(shape = 21,
          fill = "purple", 
          size = 3,
          alpha = .7
          ) + #creates qq (quantile quantile) plot
  stat_qq_line() + #adds reference line in the qq plot
  labs(x = "Theoretical quantile",
       y = "Sample quantile")+
  theme_bw()
```

It's common for some residuals in the tails being off, especially with low N (N=36, for this example). Nothing to worry here.  


```{r density plot: residual normality}
ggplot(crd_resid, aes(x = .studresid)) + #In density plot, we specify only x, we do not indicate y in the "ggplot()" function
  geom_density(color = "black",
               fill = "purple",
               alpha = .7) + #adds density plot
  scale_x_continuous(breaks = c(-3, 0, 3), limits = c(-3, 3)) + #shows only 3, 0, -3 points in x axis
  theme_bw()

```

The density plot appears to have a reasonably normal distribution even though the tails are a tad bit higher than expected. Hence, the normality assumption appears to be reasonably held. 

"Although the density is a bit higher than expected at the tails, it still looks ok.  

Next." - Dr. Bastos

## Residual outliers  
- For this, we use the **fitted vs. residual plot**.  
- What we want to see: most if not all residuals within [-3,3] on a studentized residual scale.  
- What we do not want to see: too many residuals > 3 or < -3, the farther away form the thresholds the worse.  
- Adding a `geom_hline()` at the thresholds helps to visualize and diagnose.   

```{r fitted vs. residual plot to check for residual outliers, warning=FALSE, message=FALSE}
ggplot(crd_resid, aes(x=.fitted, y=.studresid))+
  geom_hline(yintercept = 0, color="red")+
  geom_point(shape = 21,
             fill = "purple", 
             size = 3,
             alpha = .7)+
  geom_smooth()+
  geom_hline(yintercept = c(-3,3), color = "red")+
  theme_bw()

```
All residuals are within the [-3, 3] interval, so nothing to worry here.  
Now that model assumptions have been checked and met, we can proceed to using the model for inference.  

# h) Model means  
The next step in the workflow is extracting the model means.  

Whenever we are showing means (in tables or plots), we want them to be from a model, and not simply the arithmetic mean in the raw data (like we would get with `group_by()` and `summarise()`).  

This is specially important IF the data is unbalanced (i.e., missing data), in which case model means are DIFFERENT from arithmetic means on raw data. 

Also, when extracting means from an interaction, there are few different ways of doing it, and which one we do depends on the study objectives. Let's explore them below.

## Estimated marginal means for all combinations of nitrogen*potassium interactions

```{r interaction means all: to extract all means for nitrogen*potassium interactions, warning=FALSE, message=FALSE}

#If our goal is to find the overall best, we will run this interaction means all 

crd_means_all <- emmeans(crd_mod, #"em" in "emmeans" stand for "expected mariginal means
                         ~nrate_kgha:krate_kgha #We use ":" for all interaction means i.e., everything in the same level
                         ) #we need to specify "crd_mod" because this is object for the model


crd_means_all
```

Note: In the output table, "em" in "emmeans" column stand for "expected mariginal means. emmean = Expected Marginal Mean

## Estimated marginal means of all levels of nitrogen rates inside each level of potassium rates

```{r interaction means n inside k: to extract the means of nitrogen rates inside each levels of potassim rates}
#If our goal is to find the best in Nitrogen rates inside each of the Potassium rates, we will extract the means of nitrogen inside potassim rates:

crd_means_nk <- emmeans(crd_mod, ~nrate_kgha | krate_kgha) #"~nrate_kgha | krate_kgha" means We are asking  for all the Nitrogen rates inside each one of the Potassium rates

#We use "|" for interaction means of Nitrogen levels (levels of one factor) inside Potassium levels (levels of another factor) i.e., one factor inside the levels of other

crd_means_nk
```


## Estimated marginal means of all levels of potassium rates inside each level of nitrogen rates


```{r interaction means k inside n: to extract the means of potassium inside nitrogen rates}
#If our goal is to find the best Potassium rate inside each Nitrogen rates, we will run the following:

crd_means_kn <- emmeans(crd_mod, ~krate_kgha | nrate_kgha) #"~krate_kgha | nrate_kgha" means we are asking the Potassium rates inside each one of the Nitrogen rates

#We use "|" for interaction means of Potassium levels (levels of one factor) inside Nitrogen levels (levels of another factor) i.e., one factor inside the levels of other
#Important note: flipping the order of krate_kgha either before or after the "|" sign makes a difference
crd_means_kn
```

Notice how the 3 different approaches create structure in the mean extraction, which will carry over to the pwc step.  

# i) Pairwise comparisons  
Now that we extracted means, let's perform pairwise comparisons among them.  

First, let's extract means for all 3 types of interaction means extracted above. After that, we'll make a decision on which one to use.

## Pairwise comparisons of all combinatinos of nitrogen*potassium interaction levels  

```{r interaction pwc all}
crd_cld_all <- cld(crd_means_all,
                   reversed = T, #Reverses the order of appearance from highest to lowest in the columns (default is lowest to highest)
                   Letters = letters, #Lower case "letters" is a native object of R that displays all the letters of the Alphabet in lowercase; The argument here is the upper case "Letters" which is a function, I want "Letters" function to follow the order of the lower case "letters" object
                   adjust = "none", #To specify the type of multiple comparison adjustment e.g., type in "tukey" to use the Tukey's adjustment; "none" to use no adjustment
                   #alpha = 0.1 #To change the level of significance
                   )

#The "cld" in the "cld()" function stands for "Compact Letter Display"

crd_cld_all
```
## Pairwise comparisons of all levels of nitrogen rates inside each level of potassium rates  

```{r interaction pwc n inside k}
crd_cld_nk <- cld(crd_means_nk, 
                   reversed=T, #Reverses the order of appearance from highest to lowest in the columns (default is lowest to highest)
                   adjust="none", #To specify the type of multiple comparison adjustment e.g., type in "tukey" to use the Tukey's adjustment; "none" to use no adjustment
               Letters=letters#Lower case "letters" is a native object of R that displays all the letters of the Alphabet in lowercase; The argument here is the upper case "Letters" which is a function, I want "Letters" function to follow the order of the lower case "letters" object
               ) 
#Multiple comparisons for Nitrogen groups only within the groups of Potassium
crd_cld_nk
```

## Pairwise comparisons of all levels of potassium rates inside each level of nitrogen rates  


```{r interaction pwc k inside n}
crd_cld_kn <- cld(crd_means_kn, 
                   reversed=T, #Reverses the order of appearance from highest to lowest in the columns (default is lowest to highest)
                   adjust="none", #To specify the type of multiple comparison adjustment e.g., type in "tukey" to use the Tukey's adjustment; "none" to use no adjustment
               Letters=letters#Lower case "letters" is a native object of R that displays all the letters of the Alphabet in lowercase; The argument here is the upper case "Letters" which is a function, I want "Letters" function to follow the order of the lower case "letters" object
               ) 
#Multiple comparisons for only Potassium groups  within the groups of Nitrogen
crd_cld_kn
```

Notice how different types of pwc (which are actually coming from differences in how we extracted the means) are testing different hypothesis.  


## g) Final plot  

I would like to test the hypothesis of everything compared to everything else, which corresponds to our first method using `:`. Let's do that below and some light wrangling.  

Let's plot our results, including both **raw data** (for allowing our audience to inspect data distribution) and **statistical model summary (i.e., letter separation)** for inference purposes.    

Let's make this plot publication ready.  

Also, let's explore some different ways of showing this, and how that may impact interpretation, using facets.  

## Boxplots with pairwise comparisons for all combinations of nitrogen*potassium level interactions

Let's do some light wrangling here to be able to plot these.  

```{r data wrangling for crd plot with all combinations of nitrogen*potassium level interactions, warning=FALSE, message=FALSE}
crd_cld_selected <- crd_cld_all %>% #At this point, "crd_cld_al" is not a data frame and cannot be used to plot using ggplot. The first thing we need to do is to convert the "crd_cld_all" into a data frame using the function "as.data.frame()"
  as.data.frame() %>%
  mutate(letter = trimws(.group)) %>% #To remove the wide spaces from the ".group" column, we will a create a new column which we will call "letter" and use the function "trimws()" [which stands for trim wide space]. This will remove the extra spaces from the ".group" column and store the letters in a new column called "letter"
  mutate(trtname = paste0(nrate_kgha, "+", krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor

crd_cld_selected
```

```{r crd final boxplot plot with all combinations of nitrogen*potassium level interactions, warning=FALSE, message=FALSE}
#For all interactions
ggplot() +
  # Raw data and boxplots  
  geom_boxplot(data = crd_dfw, #we need to use the original data frame
               aes(x = trtname, 
                   y = yield_kgha,
                   fill = trtname
                   )) +
  geom_jitter() +
  theme(legend.position = "none") +
  # Adding letters
  geom_label(data = crd_cld_selected, #we need to use the modeled data frame
             aes(x = trtname,
                 y = emmean,#estimated marginal means from the modelled data
                 label = letter),
             size = 3,
             label.padding = unit(.1, "lines")) +
  labs(x = "N Rate + K Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") +
  stat_boxplot(geom = "errorbar", width = 0.2) +
  labs(x = " N Rate + K Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") +
  scale_fill_viridis_d() + #Color-blind friendly fill theme
  scale_color_viridis_d() #changes the dots to color-blind friendly

ggsave("../output/crd_nk_interaction_boxplot.png",
       height = 4,
       width = 6
       )
```

## Boxplots with pairwise comparisons for all levels of nitrogen rates inside each level of potassium rates  

```{r crd plot interaction pwc Potassium (k) inside Nitrogen (n) rates}

#For interaction pwc Potassium (k) inside Nitrogen (n) rates
crd_cld_kn_selected <- crd_cld_kn %>% #At this point, "crd_cld_kn" is not a data frame and cannot be used to plot using ggplot. The first thing we need to do is to convert the "crd_cld_all" into a data frame using the function "as.data.frame()"
  as.data.frame() %>%
  mutate(letter = trimws(.group)) %>% #To remove the wide spaces from the ".group" column, we will a create a new column which we will call "letter" and use the function "trimws()" [which stands for trim wide space]. This will remove the extra spaces from the ".group" column and store the letters in a new column called "letter"
  mutate(trtname = paste0(nrate_kgha, "+", krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor

crd_cld_kn_selected
```

```{r crd plot interaction pwc nitrogen (n) inside potassium (k) rates}

ggplot() +
  # Raw data and boxplots  
  geom_boxplot(data = crd_dfw,
               aes(x = krate_kgha, 
                   y = yield_kgha,
                   fill = krate_kgha
                   )) + #We want to see the Potassium rate in the x axis for all levels of Nitrogen rates
  geom_jitter() +
  theme(legend.position = "none") +
  # Adding letters
  geom_label(data = crd_cld_kn_selected,
             aes(x = krate_kgha, #We want to see the Potassium rate in the x axis for all levels of Nitrogen rates
                 y = emmean,
                 label = letter
                 )) +
  facet_grid(.~ nrate_kgha,
             labeller = labeller(nrate_kgha = function(x) {
               paste("Nitrogen Rate (Kg/Ha):", x)
             })) + #Within Nitrogen rates, we want to compare Potassium rates. So, "nrate_kgha" will go in the "facet_grid()"  
  labs(x = "Potassium Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") +
  stat_boxplot(geom = "errorbar", width = 0.2)

ggsave("../output/crd_n_inside_k_boxplot.png",
       height = 4,
       width = 6
       )
```


## Boxplots with pairwise comparisons for all levels of potassium rates inside each level of nitrogen rates  


```{r data wrangling for crd plot interaction pwc Potassium (k) inside Nitrogen (n) rates, warning=FALSE, message=FALSE}

#For interaction pwc Potassium (k) inside Nitrogen (n) rates
crd_cld_nk_selected <- crd_cld_nk %>% #At this point, "crd_cld_nk_a" is not a data frame and cannot be used to plot using ggplot. The first thing we need to do is to convert the "crd_cld_nk_selected_a" into a data frame using the function "as.data.frame()"
  as.data.frame() %>%
  mutate(letter = trimws(.group)) %>% #To remove the wide spaces from the ".group" column, we will a create a new column which we will call "letter" and use the function "trimws()" [which stands for trim wide space]. This will remove the extra spaces from the ".group" column and store the letters in a new column called "letter"
  mutate(trtname = paste0(nrate_kgha, "+", krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor

crd_cld_nk_selected
```

```{r crd plot interaction pwc Potassium (k) inside Nitrogen (n) rates, warning=FALSE, message=FALSE}
ggplot() +
  # Raw data and boxplots  
  geom_boxplot(data = crd_dfw,
               aes(x = nrate_kgha, 
                   y = yield_kgha,
                   fill = nrate_kgha #To color the boxplots by "nrate_kgha"
                   )) + #We want to see the potassium rate in the x axis for all levels of nitrogen rates
  geom_jitter() +
  theme(legend.position = "none") +
  # Adding letters
  geom_label(data = crd_cld_nk_selected,
             aes(x = nrate_kgha, #We want to see the pottasium rate in the x axis for all levels of nitrogen rates
                 y = emmean,
                 label = letter
                 )) +
  facet_grid(.~ krate_kgha,
             labeller = labeller(krate_kgha = function(x) {
               paste("Potassium Rate (Kg/Ha):", x)
             })) + #Within potassium rates, we want to compare nitrogen rates. So, "krate_kgha" will go in the "facet_grid()"  
  labs(x = "Nitrogen Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") +
   stat_boxplot(geom = "errorbar", width = 0.2)

ggsave("../output/crd_k_inside_n_boxplot.png",
       height = 4,
       width = 6
       )
```


