---
title: "Assignment 3 - CRD"
author: "Md Shakir Moazzem"  
format:
  html:
    code-fold: false
    embed-resources: true
    toc: true
    number-sections: false
    theme: cerulean
---

# Introduction  
This assignment will ask you to conduct a full CRD analysis, from data import through publication ready plot.  

For that, you will first need to watch (and code along with) the following CRD videos:

- CRD lecture: https://youtu.be/r5vsakgqMXc?si=8udshzlpZ-8td1f4&t=4941 (starts at 1:22:21, watch till end)

- CRD lecture pt 2, lab pt 1: https://youtu.be/GpfHxh1eK5U?si=nTle5YcB8JQklja2 
(watch whole video)  

- CRD lab pt 2: https://youtu.be/YQ1bK6uV194?si=LnDzRT69OsiMLc-r
(wathc the whole video)  

**AFTER watching the videos and developing the code in class**, then start working on this HW assignment.  

The different sections representing what we did in class were left in the script to provide you a scaffold to start from.  

# Instructions  
  - Move this script into the `code` subfolder of your `03_crd` project folder  
  - Move the file `wheat_nk_bamyan.csv` into the `data` folder of your `03_crd` project folder  
  - On this script, fill your name under the `title` section of the YAML  

# a) Setup  
Here is where we load the packages we will use.  
Make sure to load each package in the chunk below.  
```{r setup, warning=FALSE, message=FALSE}

#Installing packages

#install.packages("tidyverse")
#install.packages("car")
#install.packages("broom")
#install.packages("emmeans")
#install.packages("multcomp")
#install.packages("multcompView")

# Loading packages

library(tidyverse) # for data wrangling and plotting
library(car) # for Anova function
library(broom) # for model residuals extraction and residuals diagnostics
library(emmeans) # for model mean extraction
library(multcomp) # for pairwise comparison letter display
library(multcompView) # for pairwise comparison letter display

```

Now, import the data set `wheat_nk_bamyan.csv` in the chunk below.  
```{r data import}
 
crd_adf <- read_csv("../data/wheat_nk_bamyan.csv")

crd_adf

```

The **objective of this study** was to assess the effect of different N and K rates on wheat yield.  

For that, a study was conducted using a completely randomized design as the experimental design with four replicates. The treatment design was a 3 N x 3 K rate factorial, for a total of 9 treatments.  


# b) EDA (Exploratory Data Analysis) tables  
Use this space to conduct exploratory data analysis of the imported data, in the form of tables.  

```{r}
summary(crd_adf)
```
```{r glimpse}
glimpse(crd_adf)
```

# c) Wrangling  
Here, make sure to wrangle your data set with all needed steps. Refer back to class code if you need a refresher on what was needed.  

```{r crd_adfw}
crd_adfw <- crd_adf %>% #The "w" in "crd_adfw" is to indicate wrangled dataframe/ object
  mutate(rep = factor(rep), #"factor()" function converts "rep" from a "numeric" variable to "categorical" variable #The %>% pipe operator overwrites the previous "rep" (which was a "double") as a factor (categorical variable)
         nrate_kgha = factor(nrate_kgha), #"factor()" function converts "numeric" variable to "categorical" variable
         krate_kgha = factor(krate_kgha) #"factor()" function converts "numeric" variable to "categorical" variable
         ) %>%
  mutate(trtname_a = paste0(nrate_kgha,"+",krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor


crd_adfw
```


```{r crd_adfw}
summary(crd_adfw)
```
Number of replicates: 4
Number o treatments: 3 N rates x 3 K rates = 9  
Number of observations: 4 (# of reps) x 9 (# of treatments) = 36  
Yield: from 812 to 7232 kg/ha  

# d) EDA (Exploratory Data Analysis) plots  
Now, explore the wrangled data using plots.  
Make sure to explore plots showing the main effects and the interaction.  

## Question 1) Below each plot of this section, write a sentence explaining your visual interpretation of the plot.  

```{r nitrogen rate boxplot}
ggplot(crd_adfw, aes(x = nrate_kgha,
                    y = yield_kgha,
                    color = nrate_kgha #To color the boxplots by "nrate_kgha"
                    )) +
  geom_boxplot() + #"geom_boxplot()" function creates boxplots
  #geom_point() + # "geom_point()" function shows all data points in a straight line in the boxplots
  stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  geom_jitter() + # "geom_jitter" function jitters out all the data points in a horizontal spread rather than a     straight line. This is helpful because a lot of times (e.g., machine learning) all data points in a straight line does not help.
  theme(legend.position = "none") + # "theme(legend.position = "none")" function removes the legend from the graph. In this example, we do not need legends because the levels of "nrate_kgha" is already indicated in the x-axis
  labs(x = "Nitrogen Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") #To label the x and y axes
```

To explore the main effect of Nitrogen, the spread of the boxplots for the three Nitrogen levels (i.e., 0 Kg/ Ha N2, 100 Kg/ Ha N2, 200 Kg/ Ha N2) are overlapping, which indicates that either the Nitrogen rate main effect may not be significant or very weak (if there is any).

```{r potassium rate boxplot}
ggplot(crd_adfw, aes(x = krate_kgha,
                    y = yield_kgha,
                    color = krate_kgha #To color the boxplots by "nrate_kgha"
                    )) +
  geom_boxplot() + #"geom_boxplot()" function creates boxplots
  #geom_point() + # "geom_point()" function shows all data points in a straight line in the boxplots
  stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  geom_jitter() + # "geom_jitter" function jitters out all the data points in a horizontal spread rather than a     straight line. This is helpful because a lot of times (e.g., machine learning) all data points in a straight line does not help.
  theme(legend.position = "none") + # "theme(legend.position = "none")" function removes the legend from the graph. In this example, we do not need legends because the levels of "nrate_kgha" is already indicated in the x-axis
  labs(x = "Potassium Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") #To label the x and y axes
```

To explore the main effect of Potassium, the spread of the boxplots for the 30 Kg/ Ha potassium and 50 Kg/ Ha potassium are overlapping with each other but that of 0 Kg/ Ha potassium appears to not be overlapping with the boxplots of the other two levels, which indicates that there may be a significant main effect for potassium rates.

```{r nitrogen*potassium rate boxplot}
ggplot(crd_adfw, aes(x = nrate_kgha,
                    y = yield_kgha,
                    color = nrate_kgha #To color the boxplots by "nrate_kgha"
                    )) +
  geom_boxplot() + #"geom_boxplot()" function creates boxplots
  #geom_point() + # "geom_point()" function shows all data points in a straight line in the boxplots
  stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  geom_jitter() + # "geom_jitter" function jitters out all the data points in a horizontal spread rather than a     straight line. This is helpful because a lot of times (e.g., machine learning) all data points in a straight line does not help.
  theme(legend.position = "none") + # "theme(legend.position = "none")" function removes the legend from the graph. In this example, we do not need legends because the levels of "nrate_kgha" is already indicated in the x-axis
  facet_grid(.~krate_kgha,
             labeller = labeller(krate_kgha = function(x) {
               paste("Potassium Rate (Kg/Ha):", x)
             })) + #"facet_grid()" function takes all levels of a specified variable ("potassium rate"/ "krate_kgha" in this case ), then creates separate boxplots for each of the variable levels # the custom function provided to "labeller()" takes the values of the levels for krate_kgha (i.e., 0, 30, 60 kg/ha potassium rate)  and pastes the desired title on top of each facet. As a result, each facet strip will display: "Potassium Rate (Kg/Ha): 0", "Potassium Rate (Kg/Ha): 30", and "Potassium Rate (Kg/Ha): 60"
  labs(x = "Nitrogen Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") #To label the x and y axes

```

To explore the interaction effect of Nitrogen rates and Potassium rates, all the boxplots for each levels of Nitrogen rate i.e., 0 Kg/ Ha Potassium rate, 30 Kg/ Ha Potassium rate, and 60 Kg/ Ha Potassium rate have a similar increasing pattern, which indicate that the interaction effect for nitrogen*potassium rate may not be significant.

# e) Statistical model  
In this section, run the appropriate model.  
Remember to set the contrast type to sum-to-zero (the default in R is set-to-zero, which is not what we want).  

Also, remember to specify all model terms needed for the treatment design. 

## Shortcut for model specification:

Model specification (long way): y ~ x1 + x2 + x1:x2
Model specification (short way): y ~ x1*x2
Both of these same expressions are identidal and will do the same operation: y ~ x1 + x2 + x1:x2 == y ~ x1*x2

For this example,
Model specification (long way): yield_kgha ~ nrate_kgha + krate_kgha + nrate_kgha:krate_kgha
Model specification (short way): yield_kgha ~ nrate_kgha*krate_kgha
Both of these same expressions are identidal and will do the same operation:
yield_kgha ~ nrate_kgha + krate_kgha + nrate_kgha:krate_kgha == yield_kgha ~ nrate_kgha*krate_kgha

"Instead of specifying 
          `nrate_kgha + krate_kgha + nrate_kgha:krate_kgha`,  
we could have just used  
                   `nrate_kgha*krate_kgha`.  

R interprets the `*` as "give me all main effects and interactions".

The more interaction effects a model has, the more efficient using the * becomes." - Dr. Bastos  

```{r model}
# Changing to sum-to-zero contrast
options(contrasts = c("contr.sum", "contr.poly"))

# Model fitting
crd_adfw #Original (main) wrangled data frame to check the variables
crd_mod_a <- lm(yield_kgha ~ nrate_kgha*krate_kgha,
              data = crd_adfw
                )
# Summary
summary(crd_mod_a)
```

# f) ANOVA table  
Use this section to check the ANOVA table, ensuring you use type 3 sum-of-squares.

"The `Anova()` function (case sensitive) allows us to use **type 3 sum of squares**.  

The common functions `aov()` and `anova()` use type 1 SS, which is the wrong choice IF have unbalanced data.

If data is balanced, type 1 and 3 give same results.  

For sake of peace of mind, it is simpler to just always use type 3." - Dr. Bastos

```{r ANOVA}
Anova(crd_mod_a, type = 3) #"type = 3" specifies Type III Sum of Squares
```

## Question 2) Based on the ANOVA table above, for which effect(s) in the ANOVA should you extract means and perform pair-wise comparisons? Explain why.  

Based on the ANOVA table above, the "nrate_kgha*krate_kgha" interaction effect is not significant at 5% level of significance because  the p-value (= 0.53857) for this interaction effect is greater than 0.05. However, the main effects of both "nrate_kgha" and "krate_kgha" are significant at 1% level of significance becase the p-values for both "nrate_kgha "(p-value = 0.00394) and "krate_kgha" (p-value = 5.892e-06) are less than 0.01. Therefore, I should extract means and perform pair-wise comparisons for the main effects of Nitrogen rate (nrate_kgha ) and Potassium rate (krate_kgha), because both of the main effects for Nitrogen rate i.e., nrate_kgha (p-value = 0.00394) and Potassium rate i.e., krate_kgha (p-value = 5.892e-06) are found significant in the ANOVA table at alpha = 0.01 (1%) level of significance.

# g) Linear model assumptions  
Use this section to first compute your residuals, including studentdized residuals.  

```{r crd_resid}
crd_resid_a <- broom::augment(crd_mod_a) %>% #"augment() function is included in the "broom" package
  mutate(.studresid = rstudent(crd_mod_a)) #creating studentized residuals in a separate column

crd_resid_a
```

## Question 3) What are the linear model assumptions that we need to check for? Create subsections (using ##) below for each of these assumptions, and write code to produce plots to check for these assumptions. For each assumption, write down your interpretation of the produced plots, and your thoughts if the assumptions hold or not.  

# h) Model means  
Use this section to extract model means according to your decision of the ANOVA table effects.  

# i) Pairwise comparisons  
Use this section to perform pair-wise comparison of the means extracted above.  

Make sure to reverse the order from high to low, use letters instead of numbers, and no adjustment.  

# g) Final plot(s)  
Produce final plot(s) to show your results.  
Make sure to include both **raw data** and **statistical model summary (i.e., letter separation)**.  

Be mindful of your plot to ensure you are creating it in an intuitive way for your audience in relation to interpreting the letter separation structure you used.  

In class, we did not have time to make it publication-ready (e.g., a plot looking professional and ready to be included in a manuscript).

Here, make sure you deliver final plot(s) that is/are publication ready.  

Make sure to provide an interpretation for the plot(s) created, including which treatment levels were significantly higher/lower.


# Submitting your work  
Once you have developed all the code and answers, make sure to Render this quarto file.    

**Notes on rendering**:  

- Make sure to render your work and inspect how the final html look like.  
- If it does not look professional for whatever reason, then fix the issue, re-render it, recheck.  
- Only send me your work once your html file looks professional.  
  - **DO NOT** delete the file's heading levels (# and ##). They set up the proper heading 1 and 2 levels, and I use them to guide my grading.  
  - If a given chunk is also outputting warnings or messages, inhibit this behavior by changing the chunk options `message` and `warning` to `FALSE` (I'll demo this in a moment).  
  
  - If, after rendered, 2 lines of text are connected and you wish to "break line" between them, add 2 extra spaces after the first one (I'lld demo this in a moment).  

After rendering, an .html file will be created on your `code` folder.  

Rename this file to `Assignment-03-crd-LASTNAME.html`.    

For ex., mine would be `Assignment-03-crd-Bastos.html`.

Submit your work by uploading the **html** file to **eLC Assigment #3 - CRD** by Feb 3rd 11:59 pm.  
  




