---
title: "Assignment 3 - CRD"
author: "Md Shakir Moazzem"  
format:
  html:
    code-fold: false
    embed-resources: true
    toc: true
    number-sections: false
    theme: cerulean
---

# Introduction  
This assignment will ask you to conduct a full CRD analysis, from data import through publication ready plot.  

For that, you will first need to watch (and code along with) the following CRD videos:

- CRD lecture: https://youtu.be/r5vsakgqMXc?si=8udshzlpZ-8td1f4&t=4941 (starts at 1:22:21, watch till end)

- CRD lecture pt 2, lab pt 1: https://youtu.be/GpfHxh1eK5U?si=nTle5YcB8JQklja2 
(watch whole video)  

- CRD lab pt 2: https://youtu.be/YQ1bK6uV194?si=LnDzRT69OsiMLc-r
(wathc the whole video)  

**AFTER watching the videos and developing the code in class**, then start working on this HW assignment.  

The different sections representing what we did in class were left in the script to provide you a scaffold to start from.  

# Instructions  
  - Move this script into the `code` subfolder of your `03_crd` project folder  
  - Move the file `wheat_nk_bamyan.csv` into the `data` folder of your `03_crd` project folder  
  - On this script, fill your name under the `title` section of the YAML  

# a) Setup  
Here is where we load the packages we will use.  
Make sure to load each package in the chunk below.  
```{r setup, warning=FALSE, message=FALSE}

#Installing packages

install.packages("tidyverse")
install.packages("car")
install.packages("broom")
install.packages("emmeans")
install.packages("multcomp")
install.packages("multcompView")

# Loading packages

library(tidyverse) # for data wrangling and plotting
library(car) # for Anova function
library(broom) # for model residuals extraction and residuals diagnostics
library(emmeans) # for model mean extraction
library(multcomp) # for pairwise comparison letter display
library(multcompView) # for pairwise comparison letter display

```

Now, import the data set `wheat_nk_bamyan.csv` in the chunk below.  
```{r data import, warning=FALSE, message=FALSE}
 
crd_adf <- read_csv("../data/wheat_nk_bamyan.csv")

crd_adf

```

The **objective of this study** was to assess the effect of different N and K rates on wheat yield.  

For that, a study was conducted using a completely randomized design as the experimental design with four replicates. The treatment design was a 3 N x 3 K rate factorial, for a total of 9 treatments.  


# b) EDA (Exploratory Data Analysis) tables  
Use this space to conduct exploratory data analysis of the imported data, in the form of tables.  

```{r, warning=FALSE, message=FALSE}
summary(crd_adf)
```
```{r glimpse, warning=FALSE, message=FALSE}
glimpse(crd_adf)
```

# c) Wrangling  
Here, make sure to wrangle your data set with all needed steps. Refer back to class code if you need a refresher on what was needed.  

```{r crd_adfw wrangling, warning=FALSE, message=FALSE}
crd_adfw <- crd_adf %>% #The "w" in "crd_adfw" is to indicate wrangled dataframe/ object
  mutate(rep = factor(rep), #"factor()" function converts "rep" from a "numeric" variable to "categorical" variable #The %>% pipe operator overwrites the previous "rep" (which was a "double") as a factor (categorical variable)
         nrate_kgha = factor(nrate_kgha), #"factor()" function converts "numeric" variable to "categorical" variable
         krate_kgha = factor(krate_kgha) #"factor()" function converts "numeric" variable to "categorical" variable
         ) %>%
  mutate(trtname_a = paste0(nrate_kgha,"+",krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor

crd_adfw #Wrangled dataframe
```


```{r crd_adfw summary, warning=FALSE, message=FALSE}
summary(crd_adfw) #Summary statistics
```
Number of replicates: 4
Number o treatments: 3 N rates x 3 K rates = 9  
Number of observations: 4 (# of reps) x 9 (# of treatments) = 36  
Yield: from 812 to 7232 kg/ha  

# d) EDA (Exploratory Data Analysis) plots  
Now, explore the wrangled data using plots.  
Make sure to explore plots showing the main effects and the interaction.  

## Question 1) Below each plot of this section, write a sentence explaining your visual interpretation of the plot.  

```{r nitrogen rate boxplot, warning=FALSE, message=FALSE}
ggplot(crd_adfw, aes(x = nrate_kgha,
                    y = yield_kgha,
                    fill = nrate_kgha #To color the boxplots by "nrate_kgha"
                    )) +
  geom_boxplot() + #"geom_boxplot()" function creates boxplots
  #geom_point() + # "geom_point()" function shows all data points in a straight line in the boxplots
  stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  geom_jitter() + # "geom_jitter" function jitters out all the data points in a horizontal spread rather than a     straight line. This is helpful because a lot of times (e.g., machine learning) all data points in a straight line does not help.
  theme(legend.position = "none") + # "theme(legend.position = "none")" function removes the legend from the graph. In this example, we do not need legends because the levels of "nrate_kgha" is already indicated in the x-axis
  labs(x = "Nitrogen Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") #To label the x and y axes
```

To explore the main effect of Nitrogen, the spread of the boxplots for the three Nitrogen levels (i.e., 0 Kg/ Ha N2, 100 Kg/ Ha N2, 200 Kg/ Ha N2) are overlapping, which indicates that either the Nitrogen rate main effect may not be significant or very weak (if there is any).

```{r potassium rate boxplot, warning=FALSE, message=FALSE}
ggplot(crd_adfw, aes(x = krate_kgha,
                    y = yield_kgha,
                    fill = krate_kgha #To color the boxplots by "nrate_kgha"
                    )) +
  geom_boxplot() + #"geom_boxplot()" function creates boxplots
  #geom_point() + # "geom_point()" function shows all data points in a straight line in the boxplots
  stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  geom_jitter() + # "geom_jitter" function jitters out all the data points in a horizontal spread rather than a     straight line. This is helpful because a lot of times (e.g., machine learning) all data points in a straight line does not help.
  theme(legend.position = "none") + # "theme(legend.position = "none")" function removes the legend from the graph. In this example, we do not need legends because the levels of "nrate_kgha" is already indicated in the x-axis
  labs(x = "Potassium Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") #To label the x and y axes
```

To explore the main effect of Potassium, the spread of the boxplots for the 30 Kg/ Ha potassium and 50 Kg/ Ha potassium are overlapping with each other but that of 0 Kg/ Ha potassium appears to not be overlapping with the boxplots of the other two levels, which indicates that there may be a significant main effect for potassium rates.

```{r nitrogen*potassium rate boxplot, warning=FALSE, message=FALSE}
ggplot(crd_adfw, aes(x = nrate_kgha,
                    y = yield_kgha,
                    fill = nrate_kgha #To color the boxplots by "nrate_kgha"
                    )) +
  geom_boxplot() + #"geom_boxplot()" function creates boxplots
  #geom_point() + # "geom_point()" function shows all data points in a straight line in the boxplots
  stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  geom_jitter() + # "geom_jitter" function jitters out all the data points in a horizontal spread rather than a     straight line. This is helpful because a lot of times (e.g., machine learning) all data points in a straight line does not help.
  theme(legend.position = "none") + # "theme(legend.position = "none")" function removes the legend from the graph. In this example, we do not need legends because the levels of "nrate_kgha" is already indicated in the x-axis
  facet_grid(.~krate_kgha,
             labeller = labeller(krate_kgha = function(x) {
               paste("Potassium Rate (Kg/Ha):", x)
             })) + #"facet_grid()" function takes all levels of a specified variable ("potassium rate"/ "krate_kgha" in this case ), then creates separate boxplots for each of the variable levels # the custom function provided to "labeller()" takes the values of the levels for krate_kgha (i.e., 0, 30, 60 kg/ha potassium rate)  and pastes the desired title on top of each facet. As a result, each facet strip will display: "Potassium Rate (Kg/Ha): 0", "Potassium Rate (Kg/Ha): 30", and "Potassium Rate (Kg/Ha): 60"
  labs(x = "Nitrogen Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") #To label the x and y axes

```

To explore the interaction effect of Nitrogen rates and Potassium rates, all the boxplots for each levels of Nitrogen rate i.e., 0 Kg/ Ha Potassium rate, 30 Kg/ Ha Potassium rate, and 60 Kg/ Ha Potassium rate have a similar increasing pattern, which indicate that the interaction effect for nitrogen*potassium rate may not be significant.

# e) Statistical model  
In this section, run the appropriate model.  
Remember to set the contrast type to sum-to-zero (the default in R is set-to-zero, which is not what we want).  

Also, remember to specify all model terms needed for the treatment design. 

## Shortcut for model specification:

Model specification (long way): y ~ x1 + x2 + x1:x2
Model specification (short way): y ~ x1*x2
Both of these same expressions are identical and will do the same operation: y ~ x1 + x2 + x1:x2 == y ~ x1*x2

For this example,
Model specification (long way): yield_kgha ~ nrate_kgha + krate_kgha + nrate_kgha:krate_kgha
Model specification (short way): yield_kgha ~ nrate_kgha*krate_kgha
Both of these same expressions are identidal and will do the same operation:
yield_kgha ~ nrate_kgha + krate_kgha + nrate_kgha:krate_kgha == yield_kgha ~ nrate_kgha*krate_kgha

"Instead of specifying 
          `nrate_kgha + krate_kgha + nrate_kgha:krate_kgha`,  
we could have just used  
                   `nrate_kgha*krate_kgha`.  

R interprets the `*` as "give me all main effects and interactions".

The more interaction effects a model has, the more efficient using the * becomes." - Dr. Bastos  

## Changing default contrast type from "set-to-zero" to "sum-to-zero"

In R, the default contrast type is *set-to-zero*.  

In research, we normally are interested in *sum-to-zero* contrasts.  

Below we change the default to sum-to-zero ("contr.sum") before fitting the model.


```{r model, warning=FALSE, message=FALSE}
# Changing to sum-to-zero contrast
options(contrasts = c("contr.sum", "contr.poly")) #contrasts = c("contr.sum", "contr.poly") means that if the variable is categorical, change the contrast to sum to zero; if the variable is continuous, then change the contrast to polynomial 

# Model fitting
crd_adfw #Original (main) wrangled data frame to check the variables
crd_mod_a <- lm(yield_kgha ~ nrate_kgha*krate_kgha, #the block effect i.e., rep is what separates RCBD from CRD. In RCBD, the "rep" is included in the model as a factor. However, "rep" is not included in the model for CRD.
              data = crd_adfw
                )
# Summary
summary(crd_mod_a)
```

# f) ANOVA table  
Use this section to check the ANOVA table, ensuring you use type 3 sum-of-squares.

"The `Anova()` function (case sensitive) allows us to use **type 3 sum of squares**.  

The common functions `aov()` and `anova()` use type 1 SS, which is the wrong choice IF have unbalanced data.

If data is balanced, type 1 and 3 give same results.  

For sake of peace of mind, it is simpler to just always use type 3." - Dr. Bastos

```{r ANOVA, warning=FALSE, message=FALSE}
Anova(crd_mod_a, type = 3) #"type = 3" specifies Type III Sum of Squares
```

In the ANOVA output, *(Intercept)* indicates the *overall mean*. We do NOT indicate this in the ANOVA table.

Whenever your model has interaction terms, need to look at them first.  

IF interaction term is significant, then you should explore that **interaction effect**, and not the main effects separately in case they are also significant.    

In this case, the main effects for nrate_kgha and krate_kgha are significant, whereas the interaction for nrate_kgha*krate_kgha is not significant.

Hence, we should extract means and perform pairwise comparisons for the main effects nrate_kgha and krate_kgha separately.

Before we do that, let's check our model assumptions. Remember, a model is only valid for inference (i.e., means and pwc) IF if fulfills the linear model assumptions.  

## Question 2) Based on the ANOVA table above, for which effect(s) in the ANOVA should you extract means and perform pair-wise comparisons? Explain why.  

Based on the ANOVA table above, the "nrate_kgha*krate_kgha" interaction effect is not significant at 5% level of significance because  the p-value (= 0.53857) for this interaction effect is greater than 0.05. However, the main effects of both "nrate_kgha" and "krate_kgha" are significant at 1% level of significance becase the p-values for both "nrate_kgha "(p-value = 0.00394) and "krate_kgha" (p-value = 5.892e-06) are less than 0.01. Therefore, I should extract means and perform pair-wise comparisons for the main effects of Nitrogen rate (nrate_kgha ) and Potassium rate (krate_kgha), because both of the main effects for Nitrogen rate i.e., nrate_kgha (p-value = 0.00394) and Potassium rate i.e., krate_kgha (p-value = 5.892e-06) are found significant in the ANOVA table at alpha = 0.01 (1%) level of significance.

# g) Linear model assumptions  
Use this section to first compute your residuals, including studentdized residuals.  

```{r crd_resid, warning=FALSE, message=FALSE}
crd_resid_a <- broom::augment(crd_mod_a) %>% #"augment() function is included in the "broom" package
  mutate(.studresid = rstudent(crd_mod_a)) #creating studentized residuals in a separate column

crd_resid_a
```

## Question 3) What are the linear model assumptions that we need to check for? Create subsections (using ##) below for each of these assumptions, and write code to produce plots to check for these assumptions. For each assumption, write down your interpretation of the produced plots, and your thoughts if the assumptions hold or not.  

The linear model assumptions are listed below:  

"- Residual independence (no pattern)  
- Residual variance homogeneity (homoscedasticity) (meaning that the variance around the residuals are basically similar, it looks like a shotgun, like a cloud of points and no specific pattern of increasing/ decreasing variance )
- Residual normality  
- Outlier detection (< -3 SD or > 3 SD)" - Dr. Bastos

## Residual independence  
"- To check for "residual independence" assumption, we use the **fitted vs. residual plot**.  
- If we see no clear pattern in residuals with random cloud of points, we may deduce that the "residual independence" assumption hold
- If we see a clear pattern (for example, quadratic shape), we may deduce that the "residual independence" assumption may not hold
- Adding a `geom_smooth()` helps with that conclusion. We want to see the smooth line and error bands comprising 0 on the y axis." - Dr. Bastos

```{r fitted vs. residual plot: residual independence assumption, warning=FALSE, message=FALSE}
ggplot(crd_resid_a, aes(x = .fitted,
                      y = .studresid)) +
  geom_point(shape = 21, #shape of the points
             fill = "purple", #color of the points
             size = 3, #size of the points
             alpha = .7 #"alpha" specifies the transparency of the points; ranges from 0 to 1 - 0 being completely transparent, 1 is a solid color; here we used .7 for 30 % transparency
              ) +
  geom_hline(yintercept = c(-3, 0, 3), color = "red") + #"geom_hline" adds horizontal reference lines #geom_vline => adds line vertically; geom_hline => adds line horizontally
  geom_smooth() #spline regression line to visualize residual pattern
```
In the **fitted vs. residual plot** shown above, we see no clear pattern in residuals. We also observe a random cloud of points. In addition, we see that the smooth line and error bands comprise of 0 on the y axis. Hence, we may deduce that the **"residual independence"** assumption appears to hold.

## Residual homoscedasticity  
"- To check the assumption for "residual homoscedasticity", we use the **fitted vs. residual plot**.  
- What we want to see: no clear pattern in residuals, random cloud of points.  
- What we do not want to see: residuals increasing as fitted value increases (fan shape).  
- Adding a `geom_smooth()` helps with that conclusion. We want to see the smooth line and error bands comprising 0 on the y axis." - Dr. Bastos  

```{r fitted vs. residual plot: residual homoscedasticity assumption, warning=FALSE, message=FALSE}

ggplot(crd_resid_a, aes(x = .fitted,
                      y = .studresid)) +
  geom_point(shape = 21, #shape of the points
             fill = "purple", #color of the points
             size = 3, #size of the points
             alpha = .7 #"alpha" specifies the transparency of the points; ranges from 0 to 1 - 0 being completely transparent, 1 is a solid color; here we used .7 for 30 % transparency
              ) +
  geom_hline(yintercept = c(-3, 0, 3), color = "red") + #"geom_hline" adds horizontal reference lines #geom_vline => adds line vertically; geom_hline => adds line horizontally
  geom_smooth() + #spline regression line to visualize residual pattern
  theme_bw() #To change the (background) theme of the graph

```
In the **fitted vs. residual plot** shown above, we see no clear pattern in residuals. We also observe a random cloud of points. In addition, we see that the smooth line and error bands comprise of 0 on the y axis. Hence, we may deduce that the **"residual homoscedasticity"** assumption appears to hold.

## Residual normality  

"- To check the assumption for "residual normality", we use the **quantile-quantile (QQ) plot** and **density plot**.    
- What we want to see: residuals centered around 0 and following a normal distribution.  
- What we do not want to see: skewed residuals that do not follow a normal distribution.  
- On the QQ plot, we want to see residuals on the black line, meaning they follow their theoretical normal distribution." - Dr. Bastos  


```{r qq plot/ quantile quantile plot: residual normality, warning=FALSE, message=FALSE}
ggplot(crd_resid_a, aes(sample = .studresid)) +
  stat_qq(shape = 21,
          fill = "purple", 
          size = 3,
          alpha = .7
          ) + #creates qq (quantile quantile) plot
  stat_qq_line() #adds reference line in the qq plot
  labs(x = "Theoretical quantile",
       y = "Sample quantile")+
  theme_bw()
```

Based on the QQ plot, the residuals fall closely around the qq line with no strong curvature pattern or heavy tail-deviations. Hence, the normality assumption appears to be reasonably held. 

Note: "It's common for some residuals in the tails being off, especially with low N (N=36, in this example)." - Dr. Bastos 

```{r density plot: residual normality, warning=FALSE, message=FALSE}
ggplot(crd_resid_a, aes(x = .studresid)) + #In density plot, we specify only x, we do not indicate y in the "ggplot()" function
  geom_density(color = "black",
               fill = "purple",
               alpha = .7) + #adds density plot
  scale_x_continuous(breaks = c(-3, 0, 3), limits = c(-3, 3)) + #shows only 3, 0, -3 points in x axis
  theme_bw()
```

The density plot appears to have a normal distribution. Hence, the normality assumption appears to be held. 

## Residual outliers  
"- To check for residual outliers, we use the **fitted vs. residual plot**.  
- What we want to see: most if not all residuals within [-3,3] on a studentized residual scale.  
- What we do not want to see: too many residuals > 3 or < -3, the farther away form the thresholds the worse.  
- Adding a `geom_hline()` at the thresholds helps to visualize and diagnose." - Dr. Bastos   

```{r fitted vs. residual plot: residual outliers, warning=FALSE, message=FALSE}
ggplot(crd_resid_a, aes(x=.fitted, y=.studresid))+
  geom_hline(yintercept = 0, color="red")+
  geom_point(shape = 21,
             fill = "purple", 
             size = 3,
             alpha = .7)+
  geom_smooth()+
  geom_hline(yintercept = c(-3,3), color = "red")+
  theme_bw()

```
From the fitted vs. residual plot, we see that all residuals fall within the [-3, 3] interval. Hence, we can deduce that there is no residual outlier present to skew the model interpretation. 


# h) Model means  
Use this section to extract model means according to your decision of the ANOVA table effects.

Answer: 

Let the hypotheses be: 
1) the main effect of nitrogen rates will have a significant positive impact on the yield
2) the main effect of potassium rates will have a significant positive impact on the yield
2) the interaction effect of nitrogen*potassium rates will not have a significant positive/negative impact on the yield

Hence, the objective of the data analysis is to find and compare the means of all levels of Nitrogen rates within each level of the Potassium rates, then to find and compare all levels of potassium rates within each level of the nitrogen rates. 

In the ANOVA table effects, our decision was that the main effects of nitrogen rates and potassium rates are significant on the yield, whereas the interaction effect of nitrogen*potassium rate was not significant. Hence, we will extract the model means (i.e., estimated marginal means) to find and compare all levels of Nitrogen rates within each level of the Potassium rates, then we will extract the model means (i.e., estimated marginal means) to find and compare all levels of potassium rates within each level of the nitrogen rates.

Since we hypothesized that the interaction effect of nitrogen*potassium rates will not have a significant positive/negative impact on the yield, we are not interested in findgin and comparing the means for all combinations of nitrogen X potassium interactions.  


## Estimated marginal means of all levels of nitrogen rates inside each level of potassium rates   


```{r interaction means n inside k: to extract the means of nitrogen rates inside each level of potassim rates, warning=FALSE, message=FALSE}
#If our goal is to find the best in Nitrogen rates inside each of the Potassium rates, we will extract the means of nitrogen inside potassim rates:

crd_means_nk_a <- emmeans(crd_mod_a, ~nrate_kgha | krate_kgha) #We are asking  for all the Nitrogen rates inside each one of the Potassium rates

#We use "|" for interaction means of Nitrogen levels (levels of one factor) inside Potassium levels (levels of another factor) i.e., one factor inside the levels of other

crd_means_nk_a
```


## Estimated marginal means of all levels of potassium rates inside each level of nitrogen rates  



```{r interaction means k inside n: to extract the means of potassium rates inside each level of nitrogen rates, warning=FALSE, message=FALSE}
#If our goal is to find the best Potassium rate inside each Nitrogen rates, we will run the following:

crd_means_kn_a <- emmeans(crd_mod_a, ~krate_kgha | nrate_kgha) #We are asking the Potassium rates inside each one of the Nitrogen rates

#We use "|" for interaction means of Potassium levels (levels of one factor) inside Nitrogen levels (levels of another factor) i.e., one factor inside the levels of other
#Important note: flipping the order of krate_kgha either before or after the "|" sign makes a difference
crd_means_kn_a
```

Note: In the output tables, "em" in "emmeans" column stand for "expected mariginal means


# i) Pairwise comparisons  
Use this section to perform pair-wise comparison of the means extracted above.  

Make sure to reverse the order from high to low, use letters instead of numbers, and no adjustment.  


## Pairwise comparisons of all levels of nitrogen rates inside each level of potassium rates  


```{r interaction pwc n inside k, warning=FALSE, message=FALSE}
crd_cld_nk_a <- cld(crd_means_nk_a, 
                   reversed=T, #Reverses the order of appearance from highest to lowest in the columns (default is lowest to highest)
                   adjust="none", #To specify the type of multiple comparison adjustment e.g., type in "tukey" to use the Tukey's adjustment; "none" to use no adjustment
               Letters=letters#Lower case "letters" is a native object of R that displays all the letters of the Alphabet in lowercase; The argument here is the upper case "Letters" which is a function, I want "Letters" function to follow the order of the lower case "letters" object
               ) 
#Multiple comparisons for Nitrogen groups only within the groups of Potassium
crd_cld_nk_a
```

## Pairwise comparisons of all levels of potassium rates inside each level of nitrogen rates  


```{r interaction pwc k inside n, warning=FALSE, message=FALSE}
crd_cld_kn_a <- cld(crd_means_kn_a, 
                   reversed=T, #Reverses the order of appearance from highest to lowest in the columns (default is lowest to highest)
                   adjust="none", #To specify the type of multiple comparison adjustment e.g., type in "tukey" to use the Tukey's adjustment; "none" to use no adjustment
               Letters=letters#Lower case "letters" is a native object of R that displays all the letters of the Alphabet in lowercase; The argument here is the upper case "Letters" which is a function, I want "Letters" function to follow the order of the lower case "letters" object
               ) 
#Multiple comparisons for only Potassium groups  within the groups of Nitrogen
crd_cld_kn_a
```

Notice how different types of pwc (which are actually coming from differences in how we extracted the means) are testing different hypothesis.  

I would like to test the hypothesis of everything compared to everything else, which corresponds to our first method using `:`. Let's do that below and some light wrangling.    



# g) Final plot(s)  
Dr. Bastos' instruction: Produce final plot(s) to show your results.  
Make sure to include both **raw data** and **statistical model summary (i.e., letter separation)**.  

Be mindful of your plot to ensure you are creating it in an intuitive way for your audience in relation to interpreting the letter separation structure you used.  

In class, we did not have time to make it publication-ready (e.g., a plot looking professional and ready to be included in a manuscript).

Here, make sure you deliver final plot(s) that is/are publication ready.  

Make sure to provide an interpretation for the plot(s) created, including which treatment levels were significantly higher/lower.

Answer:

## Boxplots with pairwise comparisons for all levels of nitrogen rates inside each level of potassium rates  


```{r data wrangling for crd plot interaction pwc nitrogen (n) inside potassium (k) rates, warning=FALSE, message=FALSE}

#For interaction pwc Potassium (k) inside Nitrogen (n) rates
crd_cld_kn_selected_a <- crd_cld_kn_a %>% #At this point, "crd_cld_kn_a" is not a data frame and cannot be used to plot using ggplot. The first thing we need to do is to convert the "crd_cld_kn_selected_a" into a data frame using the function "as.data.frame()"
  as.data.frame() %>%
  mutate(letter = trimws(.group)) %>% #To remove the wide spaces from the ".group" column, we will a create a new column which we will call "letter" and use the function "trimws()" [which stands for trim wide space]. This will remove the extra spaces from the ".group" column and store the letters in a new column called "letter"
  mutate(trtname = paste0(nrate_kgha, "+", krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor

crd_cld_kn_selected_a
```


```{r crd plot interaction pwc nitrogen (n) inside potassium (k) rates}
ggplot() +
  # Raw data and boxplots  
  geom_boxplot(data = crd_adfw,
               aes(x = krate_kgha, 
                   y = yield_kgha,
                   fill = krate_kgha 
                   )) + #We want to see the nitrogen rate in the x axis for all levels of potassium rates
  geom_jitter() +
  theme(legend.position = "none") +
  # Adding letters
  geom_label(data = crd_cld_kn_selected_a,
             aes(x = krate_kgha, #We want to see the nitrogen rates in the x axis for all levels of pottasium rates
                 y = emmean,
                 label = letter
                 )) +
  facet_grid(.~ nrate_kgha,
             labeller = labeller(nrate_kgha = function(x) {
               paste("Nitrogen Rate (Kg/Ha):", x)
             })) + #Within Nitrogen rates, we want to compare Potassium rates. So, "nrate_kgha" will go in the "facet_grid()"  
   labs(x = "Potassium Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") +
   stat_boxplot(geom = "errorbar", width = 0.2)
```


**Interpretation:**

From the plot shown above, we come to the following conclusions:  

When the nitrogen rate was 0 kg/ha nitrogen, the yield for 60 kg/ha potassium rate was significantly higher than the yield for 0 kg/ha potassium rate at 5% level of significance. However, the yield for 30 kg/ha potassium rate was not significantly different than both of the yields for 0 kg/ha potassium rate and 60 kg/ha potassium rate at 5% level of significance.  

When the nitrogen rate was 100 kg/ha nitrogen, the yield for 0 kg/ha potassium rate was significantly lower than the both of the yields for 30 kg/ha potassium rate and 60 kg/ha potassium rate at 5% level of significance. However, the the yield for 30 kg/ha potassium rate was not significantly different than the yield for 60 kg/ha potassium rate at 5% level of significance.  

When the nitrogen rate was 200 kg/ha nitrogen, the yield for 0 kg/ha potassium rate was significantly lower than the both of the yields for 30 kg/ha potassium rate and 60 kg/ha potassium rate at 5% level of significance. However, the the yield for 30 kg/ha potassium rate was not significantly different than the yield for 60 kg/ha potassium rate at 5% level of significance.  


## Boxplots with pairwise comparisons for all levels of potassium rates inside each level of nitrogen rates  


```{r data wrangling for crd plot interaction pwc Potassium (k) inside Nitrogen (n) rates, warning=FALSE, message=FALSE}

#For interaction pwc Potassium (k) inside Nitrogen (n) rates
crd_cld_nk_selected_a <- crd_cld_nk_a %>% #At this point, "crd_cld_nk_a" is not a data frame and cannot be used to plot using ggplot. The first thing we need to do is to convert the "crd_cld_nk_selected_a" into a data frame using the function "as.data.frame()"
  as.data.frame() %>%
  mutate(letter = trimws(.group)) %>% #To remove the wide spaces from the ".group" column, we will a create a new column which we will call "letter" and use the function "trimws()" [which stands for trim wide space]. This will remove the extra spaces from the ".group" column and store the letters in a new column called "letter"
  mutate(trtname = paste0(nrate_kgha, "+", krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor

crd_cld_nk_selected_a
```

```{r crd plot interaction pwc Potassium (k) inside Nitrogen (n) rates, warning=FALSE, message=FALSE}
ggplot() +
  # Raw data and boxplots  
  geom_boxplot(data = crd_adfw,
               aes(x = nrate_kgha, y = yield_kgha,
                   color = nrate_kgha #To color the boxplots by "nrate_kgha"
                   )) + #We want to see the potassium rate in the x axis for all levels of nitrogen rates
  geom_jitter() +
  theme(legend.position = "none") +
  # Adding letters
  geom_label(data = crd_cld_nk_selected_a,
             aes(x = nrate_kgha, #We want to see the pottasium rate in the x axis for all levels of nitrogen rates
                 y = emmean,
                 label = letter
                 )) +
  facet_grid(.~ krate_kgha,
             labeller = labeller(krate_kgha = function(x) {
               paste("Potassium Rate (Kg/Ha):", x)
             })) + #Within potassium rates, we want to compare nitrogen rates. So, "krate_kgha" will go in the "facet_grid()"  
  labs(x = "Nitrogen Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") +
   stat_boxplot(geom = "errorbar", width = 0.2)
```

**Interpretation:**

From the plot shown above, we come to the following conclusions:

When the potassium rate was 0 kg/ha potassium, there was no sifnificant difference among the yields for 0 kg/ha nitrogen rate, 100 kg/ha nitrogen rate, and 200 kg/ha nitrogen rate at 5% level of significance.

When the potassium rate was 30 kg/ha potassium, the yield for 200 kg/ha nitrogen rate was significantly higher than the yield for 0 kg/ha nitrogen rate at 5% level of significance. However, the yield for 100 kg/ha nitrogen rate was not significantly different than both of the yields for 0 kg/ha nitrogen rate and 200 kg/ha nitrogen rate at 5% level of significance.

When the potassium rate was 60 kg/ha potassium, there was no sifnificant difference among the yields for 0 kg/ha nitrogen rate, 100 kg/ha nitrogen rate, and 200 kg/ha nitrogen rate at 5% level of significance.

# Submitting your work  
Once you have developed all the code and answers, make sure to Render this quarto file.    

**Notes on rendering**:  

- Make sure to render your work and inspect how the final html look like.  
- If it does not look professional for whatever reason, then fix the issue, re-render it, recheck.  
- Only send me your work once your html file looks professional.  
  - **DO NOT** delete the file's heading levels (# and ##). They set up the proper heading 1 and 2 levels, and I use them to guide my grading.  
  - If a given chunk is also outputting warnings or messages, inhibit this behavior by changing the chunk options `message` and `warning` to `FALSE` (I'll demo this in a moment).  
  
  - If, after rendered, 2 lines of text are connected and you wish to "break line" between them, add 2 extra spaces after the first one (I'lld demo this in a moment).  

After rendering, an .html file will be created on your `code` folder.  

Rename this file to `Assignment-03-crd-LASTNAME.html`.    

For ex., mine would be `Assignment-03-crd-Bastos.html`.

Submit your work by uploading the **html** file to **eLC Assigment #3 - CRD** by Feb 3rd 11:59 pm.  
  




